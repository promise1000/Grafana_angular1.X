{"version":3,"sources":["../src/rendering.js"],"names":["link","scope","elem","attrs","ctrl","data","panel","find","events","on","progressBar","console","log","width","height","tagWidth","SliderS","substring","length","barHeight","bH","shape","currentShape","tagStyle","sliderColor","content","bars","i","obj","decimal","thresholds","barColor","slice","split","postfix","prefix","min","max","datapoints","target","fontSize","adjFontSize","item","barThresholds","push","label","randomColor","pop","tag","parseFloat","value","toFixed","decimals","lastPercent","thresholdValue","thresholdPercent","curPercent","val","left","sharpPercent","html","_","$"],"mappings":"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","file":"rendering.js","sourcesContent":["import _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport 'jquery.flot';\r\nimport 'jquery.flot.pie';\r\n\r\n// elem是ng-transclude组件bar的容器 ctrl是progressbar插件的实例\r\nexport default function link (scope, elem, attrs, ctrl) {\r\n  var data, panel;\r\n  elem = elem.find('.progressbar-panel');\r\n  // 向ctrl实例注册render函数\r\n  ctrl.events.on('render', function () {\r\n    if (!ctrl.data) { return; }\r\n    progressBar(ctrl);\r\n  });\r\n\r\n  function progressBar(ctrl) { \r\n    // ctrl里面返回的data就是[],后台返回的在response里面，这个ctrl.data是解析过的吧\r\n    console.log('ctrl是啥',ctrl);\r\n    // 获取bar的自适应高度\r\n    var width = elem.width();\r\n    var height = elem.height();\r\n    var tagWidth = width*0.01768034*(ctrl.panel.SliderS.substring(0,ctrl.panel.SliderS.length-1)/100)\r\n    console.log(width,height);\r\n    var barHeight = width*0.0106082*(ctrl.panel.bH.substring(0,ctrl.panel.bH.length-1)/100);\r\n    var shape = ctrl.panel.currentShape\r\n    var tagStyle = shape==='triangle'\r\n      ?('height:0;width:0;border-width:'+tagWidth+'px;border-top-color:'+ctrl.panel.sliderColor)\r\n      :('height:'+tagWidth+'px;width:'+tagWidth+'px;background:'+ctrl.panel.sliderColor);\r\n    // 拼bar容器标签\r\n    var content = '<div class=\"bar-container\" style=\"padding: 10px 27px;\">';\r\n    // data后台的相应值\r\n    var data = ctrl.data;\r\n    console.log('CtrlData是',ctrl.data)\r\n    // 重复引用赋值(简化引用操作)\r\n    var bars = ctrl.bars\r\n     // 循环出来后台获取的值\r\n     console.log(\"后台\",data)\r\n    for(let i=0;i<data.length;i++){\r\n      var obj={};\r\n      obj['decimals'] = data[i].decimal\r\n      obj['thresholds'] = data[i].thresholds\r\n      obj['label'] = ctrl.panel.barColor.slice(0,data[i].thresholds.split(',').length+2)\r\n      obj['postfix'] = data[i].postfix\r\n      obj['prefix'] = data[i].prefix\r\n      obj['min'] = data[i].min\r\n      obj['max'] = data[i].max \r\n      console.log('zhi',data[i].datapoints) \r\n      // obj['value'] = data[i].datapoints[0]\r\n      // \r\n      // \r\n      // for(let item in data[i]){\r\n      //   obj[item] = data[i].target\r\n      // }\r\n      bars[data[i].target]= obj\r\n    }\r\n\r\n    // bar文字大小\r\n    var fontSize = ctrl.adjFontSize ? ctrl.fontSize : '0.8vw';\r\n    // 循环bar对象\r\n    for(var item in bars){\r\n      // 获取节点值数组（barThresholds是每个bar的每个阈值）\r\n\r\n      var barThresholds = bars[item].thresholds===\"\"?[]:bars[item].thresholds.split(',');\r\n      barThresholds.push(bars[item].max)\r\n      // 关联阀值添加删除 bars[item].label = ctrl.panel.barColor.slice(0,barThresholds.length)\r\n      barThresholds.length > bars[item].label.length && (bars[item].label.push(ctrl.randomColor()))\r\n      barThresholds.length < bars[item].label.length && (bars[item].label.pop())\r\n      // 获取tag数组(就是所有的颜色)\r\n      var tag = bars[item].label;\r\n      // 获取最大值和最小值\r\n      var max = parseFloat(bars[item].max);\r\n      var min = parseFloat(bars[item].min);\r\n      // 拼接节段label\r\n      content += '<div style=\"text-align:left; color:#ffffff; font-size:' + fontSize + '; display:inline-block; margin:19px 1px 1px 1px;\">' + item + '&nbsp' + '</div>';\r\n      content += '<div style=\"text-align:left; color:#ffffff; font-size:' + fontSize + '; display:inline-block; margin:19px 1px 1px 1px;\">' + bars[item].prefix + ' ' + parseFloat(bars[item].value).toFixed(bars[item].decimals) + ' ' + bars[item].postfix + '</div>';\r\n      content += '<div class=\"progress\" style=\"width: 100%; height:' + barHeight + 'px;\"><span class=\"tag-min\">'+ min +'</span>';\r\n      var lastPercent = 0; //记录最后的值的百分比\r\n      for(var i in barThresholds){\r\n        // 节段宽度计算(按滑块的百分比来计算)\r\n        var thresholdValue = parseFloat(barThresholds[i]);\r\n        var thresholdPercent= (thresholdValue-min)/(max-min)*100;\r\n        var curPercent = thresholdPercent - lastPercent;\r\n        content += '<div class=\"progress-bar\" style=\"width: '+ curPercent + '%; height: ' + barHeight + 'px; background-color: ' + tag[i] + ';\"><span class=\"tag-val\">'+ barThresholds[i] +'</span></div>';\r\n        lastPercent = thresholdPercent;\r\n      } \r\n      // 获取滑块的位置\r\n      var val = parseFloat(bars[item].value)\r\n      var left = (val-min) / (max-min)*100; \r\n      var sharpPercent = tagWidth/2/width*100;\r\n      left -= sharpPercent;\r\n      content += '<span class=\"bar-tag ' + shape + '\"style=\"left:'+left+'%;'+tagStyle+'\"></span>'\r\n      content += '</div>';\r\n    }\r\n    content += '</div>';\r\n    elem.html(content);\r\n  }\r\n}\r\n"]}